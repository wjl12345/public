function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _require = require('../util'),
    mix = _require.mix;

var _require2 = require('../global'),
    delegateStyle = _require2.delegateStyle;

var body = document.body;
module.exports = {
  getDefaultCfg: function getDefaultCfg() {
    return {
      updateEdge: true,
      delegate: true,
      delegateStyle: {}
    };
  },
  getEvents: function getEvents() {
    return {
      'node:dragstart': 'onDragStart',
      'node:drag': 'onDrag',
      'node:dragend': 'onDragEnd',
      'canvas:mouseleave': 'onOutOfRange'
    };
  },
  onDragStart: function onDragStart(e) {
    if (!this.shouldBegin.call(this, e)) {
      return;
    }

    this.target = e.item;
    this.origin = {
      x: e.x,
      y: e.y
    };
  },
  onDrag: function onDrag(e) {
    if (!this.origin) {
      return;
    }

    if (!this.get('shouldUpdate').call(this, e)) {
      return;
    }

    this._update(this.target, e);
  },
  onDragEnd: function onDragEnd(e) {
    if (!this.shouldEnd.call(this, e)) {
      return;
    }

    if (!this.origin) {
      return;
    }

    var delegateShape = this.target.get('delegateShape');

    if (delegateShape) {
      delegateShape.remove();
      this.target.set('delegateShape', null);
    }

    this._update(this.target, e, true);

    this.point = null;
    this.origin = null; // 终止时需要判断此时是否在监听画布外的 mouseup 事件，若有则解绑

    var fn = this.fn;

    if (fn) {
      body.removeEventListener('mouseup', fn, false);
      this.fn = null;
    }
  },
  // 若在拖拽时，鼠标移出画布区域，此时放开鼠标无法终止 drag 行为。在画布外监听 mouseup 事件，放开则终止
  onOutOfRange: function onOutOfRange(e) {
    var self = this;

    if (this.origin) {
      var canvasElement = self.graph.get('canvas').get('el');

      var fn = function fn(ev) {
        if (ev.target !== canvasElement) {
          self.onDragEnd(e);
        }
      };

      this.fn = fn;
      body.addEventListener('mouseup', fn, false);
    }
  },
  _update: function _update(item, e, force) {
    var origin = this.origin;
    var model = item.get('model');

    if (!this.point) {
      this.point = {
        x: model.x,
        y: model.y
      };
    }

    var x = e.x - origin.x + this.point.x;
    var y = e.y - origin.y + this.point.y;
    this.origin = {
      x: e.x,
      y: e.y
    };
    this.point = {
      x: x,
      y: y
    };

    if (this.delegate && !force) {
      this._updateDelegate(item, x, y);

      return;
    }

    if (this.get('updateEdge')) {
      this.graph.updateItem(item, {
        x: x,
        y: y
      });
    } else {
      item.updatePosition({
        x: x,
        y: y
      });
      this.graph.paint();
    }
  },
  _updateDelegate: function _updateDelegate(item, x, y) {
    var self = this;
    var shape = item.get('delegateShape');
    var bbox = item.get('keyShape').getBBox();

    if (!shape) {
      var parent = self.graph.get('group');
      var attrs = mix({}, delegateStyle, this.delegateStyle); // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标

      shape = parent.addShape('rect', {
        attrs: _extends({
          width: bbox.width,
          height: bbox.height,
          x: x - bbox.width / 2,
          y: y - bbox.height / 2
        }, attrs)
      });
      shape.set('capture', false);
      item.set('delegateShape', shape);
    }

    shape.attr({
      x: x - bbox.width / 2,
      y: y - bbox.height / 2
    });
    this.graph.paint();
  }
};